% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/acPCoA.R
\name{acPCoA}
\alias{acPCoA}
\title{Perform AC-PCoA for confounding factor adjustement based on Principle Coordinate Analysis}
\usage{
acPCoA(
  DistanceMatrix,
  ConfounderMatrix,
  nPC = 2,
  lambdas = seq(0, 20, 0.05),
  kernel = "linear",
  bandwidth = NULL,
  anov = T,
  perc = 0.05
)
}
\arguments{
\item{DistanceMatrix}{the n by n data distance matrix, where n is the number of samples. The (i,j)-th entry stands for the distance (dissimilarity) between the i-th sample and the j-th sample.}

\item{ConfounderMatrix}{the n by q confounder matrix, where n is the number of samples, q is the number of confounding factors.}

\item{nPC}{number of principal components to compute}

\item{lambdas}{the tuning parameter, non-negative.}

\item{kernel}{the kernel to use: "linear", "gaussian".}

\item{bandwidth}{bandwidth h for Gaussian kernel. Optional.}

\item{anov}{True or False. Whether the penalty term has the between groups sum of squares interpretation. Default is True.}

\item{perc}{the best lambda is defined to be the smallest lambda with R(lambda)<=perc (if anov=T), or R(lambda)<=perc*R(lambda=0) (if anov=F) in the nPC principal components.}
}
\value{
The principal components and the projected data
\item{v}{the principal components, p by nPC matrix}
\item{Xv}{the projected data, i.e. X times v}
\item{eigenvalueX}{eigenvalues for the PCs}
\item{varianceX}{variance explained by the PCs}
\item{varianceX_perc}{percentage of total variance in X explained by the PCs. If eval=F, NA is returned.}
\item{eigenvalueXperm}{eigenvalues for the PCs, permutation. If eval=F, NA is returned.}
\item{varianceXperm}{variance explained by the PCs, permutation. If eval=F, NA is returned.}
\item{sigPC}{the significant PCs. If eval=F, NA is returned.}
\item{...}{Input parameters for the function}
}
\description{
Perform AC-PCoA for confounding factor adjustement based on Principle Coordinate Analysis
}
\examples{
\dontrun{
X <- data_mbqc_groupA$DistMat.BC;
Y <- data_mbqc_groupA$ConfounderMat;
result_acPCoA <- acPCoA(DistanceMatrix=X, ConfounderMatrix=Y, nPC=2, lambda=seq(0, 20, 0.05), kernel="linear")
ggplot(as.data.frame(result_acPCoA$Xv),aes(x=V1,y=V2,color=data_mbqc_groupA$Specimen))+geom_point()
}
}
